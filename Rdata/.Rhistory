ungroup() %>%
select(-week, -primary_cnt, -bov_infx) %>%
filter(!is.na(log_q_per_ml)) %>%
arrange(id, time) %>%
ggplot(aes(x = time, y = log_q_per_ml)) %>%
add(geom_point(color = my_cols[2])) %>%
add(geom_smooth(aes(x = time, y = log_q_per_ml),
span = 0.3,
se = FALSE,
color = my_cols[5])) %>%
add(facet_wrap(~episode, nrow = 4, ncol = 1)) %>%
add(theme_minimal()) %>%
add(theme(legend.position = "none")) %>%
add(labs(
x = "\n Duration, weeks",
y = expression(Log[10] ~ HBoV-1/mL)
))
View(episodes)
head(episodes)
episodes %>%
ggplot(aes(x = time, y = log_q_per_ml)) %>%
add(geom_line(size = 1, color = my_cols[2])) %>%
add(facet_wrap(~episode, nrow = 2)) %>%
add(theme_trueMinimal()) %>%
add(theme(legend.position = "none")) %>%
add(labs(y = expression(Log[10] ~ HBoV-1/mL),
x = "Time, weeks"))
View(bov.pad)
episodes %>%
ggplot(aes(x = time, y = ma_pcr, color = episode)) %>%
add(geom_line(size = 1)) %>%
add(facet_wrap(~episode, nrow = 1)) %>%
add(theme_trueMinimal()) %>%
add(scale_color_manual(values = my_cols)) %>%
add(theme(legend.position = "none")) %>%
add(labs(y = expression(Log[10] ~ HBoV-1/mL),
x = "Time, weeks",
caption = "Data plotted with 3 week moving averages"))
episodes %>%
ddply(.(episode, time), summarise,
log_q_per_ml = mean(log_q_per_ml)) %>%
ddply("episode", transform,
ma_pcr = zoo::rollmean(log_q_per_ml, 3,
align = "right",
na.pad = TRUE)) %>%
ggplot(aes(x = time, y = ma_pcr, color = episode)) %>%
add(geom_line(size = 1)) %>%
add(facet_wrap(~episode, nrow = 1)) %>%
add(theme_trueMinimal()) %>%
add(scale_color_manual(values = my_cols)) %>%
add(theme(legend.position = "none")) %>%
add(labs(y = expression(Log[10] ~ HBoV-1/mL),
x = "Time, weeks",
caption = "Data plotted with 3 week moving averages"))
bov.pad %>%
filter(episode %in% c('primary','secondary','tertiary','quaternary')) %>%
arrange(id, week) %>%
group_by(id) %>%
mutate(time = row_number()) %>%
ungroup() %>%
select(-week, -primary_cnt, -bov_infx) %>%
filter(!is.na(log_q_per_ml)) %>%
arrange(id, time) %>%
ggplot(aes(x = time, y = log_q_per_ml)) %>%
add(geom_point(color = my_cols[2])) %>%
add(geom_smooth(aes(x = time, y = log_q_per_ml),
span = 0.3,
se = FALSE,
color = my_cols[5])) %>%
add(facet_wrap(~episode, nrow = 4, ncol = 1)) %>%
add(theme_minimal()) %>%
add(theme(legend.position = "none")) %>%
add(labs(
x = "\n Duration, weeks",
y = expression(Log[10] ~ HBoV-1/mL)
))
intervals <- durations %>%
select(starts_with("interval")) %>%
filter(!is.na(interval_ps))
intervals %>%
select(-interval_qq) %>%
melt() %>%
mutate(interval = revalue(variable,
c("interval_ps" = "Primary-Secondary",
"interval_st" = "Secondary-Tertiary",
"interval_tq" = "Tertiary-Quaternary"))) %>%
select(-variable) %>%
filter(!is.na(value)) %>%
ggplot(aes(x = value, y = interval)) %>%
add(geom_joy(aes(fill = interval))) %>%
add(theme_trueMinimal()) %>%
add(theme(legend.position = "none")) %>%
add(scale_fill_brewer(direction = -1)) %>%
add(labs(
x = "\n Time, weeks",
y = "Interval between shedding events"
))
f <- function(x) {
n = length(na.omit(x))
mean = mean(x, na.rm = TRUE)
sd = sd(x, na.rm = TRUE)
median = median(x, na.rm = TRUE)
min = min(x, na.rm = TRUE)
max = max(x, na.rm = TRUE)
return(data.frame(n = n,
mean = mean,
sd = sd,
median = median,
min = min,
max = max))
}
kable(sapply(intervals, f))
persistent <- durations %>%
filter(primary_dur >= 10) %>%
select(id, primary_dur)
persistent %>%
summarise(n = n(),
median = median(primary_dur),
iqr = IQR(primary_dur),
mean = mean(primary_dur),
sd = sd(primary_dur),
min = min(primary_dur),
max = max(primary_dur))
primary_persist <- persistent %>%
select(id) %>%
left_join(bov.pad, by = "id") %>%
filter(episode == 'primary') %>%
select(-primary_cnt, -bov_infx, -episode) %>%
arrange(id, week) %>%
group_by(id) %>%
mutate(time = row_number()) %>%
ungroup()
primary_persist %>%
filter(!is.na(log_q_per_ml)) %>%
ggplot(aes(x = time)) %>%
add(geom_point(aes(y = log_q_per_ml), color = my_cols[5])) %>%
add(geom_smooth(aes(y = log_q_per_ml),
color = my_cols[2],
alpha = 0.1,
se = FALSE)) %>%
add(facet_wrap(~id, ncol = 7)) %>%
add(theme_trueMinimal()) %>%
add(scale_x_continuous(breaks = seq(0, 30, by = 5),
limits = c(0, 30))) %>%
add(labs(x = "\n Weeks from Infection Start",
y = expression(Log[10] ~ HBoV-1/mL),
caption = "Limited to infections spanning \u2265 10 weeks"))
pattern1 <- c('179','184','207','243','247','270','285','317')
pattern2 <- c('92','162','189','216','233','271')
subset_demo <- main.long %>%
distinct(id, maternal.dob, infant.dob, race_text,
total.number.of.family, number.of.family..18.yrs,
family.income, daycare.start, daycare.start.c,
daycare.end, daycare.end.c, play.group, play.start,
play.start.c, play.end, play.end.c, day.week.play,
bf_duration, siblings, breast_fed, seizure_hx, female) %>%
mutate(daycare_dur = difftime(daycare.end, daycare.start, units = "weeks"),
daycare_dur = as.numeric(daycare_dur),
day_care = ifelse(daycare.start.c == 1, 1, 0),
play_group = ifelse(play.group == 'Y', 1, 0),
play_group = ifelse(play.group == 'unknown', NA, play_group),
playgrp_dur = difftime(play.end, play.start, units = "weeks"),
playgrp_dur = as.numeric(playgrp_dur),
persistent = ifelse(id %in% persistent$id, 1, 0)) %>%
mutate_at(c("siblings","breast_fed","seizure_hx",
"female","day_care","play_group","persistent"),
funs(factor(., levels = c(0, 1),
labels = c("No", "Yes")))) %>%
rename(fam_lt_18 = number.of.family..18.yrs,
family_income = family.income,
family_size = total.number.of.family)
# dput(names(subset_demo))
vars <- c("female", "siblings", "race_text", "family_size", "fam_lt_18",
"breast_fed", "bf_duration", "seizure_hx",
"daycare_dur", "day_care", "play_group","playgrp_dur")
nonnormal <- c("family_size", "fam_lt_18","bf_duration",
"daycare_dur", "playgrp_dur")
table1 <- CreateTableOne(vars = vars,
data = subset_demo,
strata = "persistent")
print(table1, nonnormal = nonnormal)
ppA <- primary_persist %>% filter(id %in% pattern1)
ppB <- primary_persist %>% filter(id %in% pattern2)
grpPlot <- function(df, smooth = FALSE, ylab, xlab) {
p <- df %>%
filter(!is.na(log_q_per_ml)) %>%
ggplot(aes(x = time)) %>%
add(geom_line(aes(y = log_q_per_ml, color = id),
size = 1.05)) %>%
add(theme_bw()) %>%
add(scale_x_continuous(breaks = seq(0, 30, by = 5),
limits = c(0, 30))) %>%
add(scale_y_continuous(breaks = seq(2, 10, by = 2),
limits = c(2, 10))) %>%
add(theme(legend.justification = c("right", "top"),
legend.position = c(0.98, 0.98))) %>%
add(labs(title = '',
y = ylab,
x = xlab,
color = "Infant ID"))
if (smooth) {
p <- p + geom_smooth(aes(y = log_q_per_ml),
method = "gam",
formula = y ~ s(x, bs = "ps"),
color = "black",
se = FALSE,
size = 1.5)
}
p
}
grpAplot <- grpPlot(ppA, ylab = expression(Log[10] ~ HBoV-1/mL), xlab = '')
grpBplot <- grpPlot(ppB, ylab = '', xlab = '')
grpAplot.smooth <- grpPlot(ppA, smooth = TRUE, xlab = '',
ylab = expression(Log[10] ~ HBoV-1/mL))
grpBplot.smooth <- grpPlot(ppB, smooth = TRUE, xlab = '', ylab = '')
library(ggpubr)
plot1 <- ggarrange(grpAplot, grpBplot, ncol = 2, labels = c("A","B"))
annotate_figure(plot1,
bottom = text_grob("Weeks from Infection Start"))
plot2 <- ggarrange(grpAplot.smooth, grpBplot.smooth,
ncol = 2, labels = c("A", "C"))
plot2
pointsPat1 <- primary_persist %>%
filter(id %in% pattern1) %>%
group_by(id) %>%
arrange(id, week) %>%
mutate(first = row_number() == 1,
last = row_number() == n(),
peak = ifelse(max(log_q_per_ml, na.rm = TRUE) == log_q_per_ml,
TRUE, FALSE),
point = factor(ifelse(first, 'first',
ifelse(peak, 'peak',
ifelse(last, 'last', ''))))) %>%
ungroup() %>%
filter(point != '') %>%
select(-week, -first, -last, -peak)
pat1plot <- persistent %>%
filter(id %in% pattern1) %>%
ggplot() %>%
add(geom_segment(aes(x = 1, xend = primary_dur, y = id, yend = id),
size = 3,
color = my_cols[5])) %>%
add(geom_point(data = pointsPat1,
aes(x = time, y = id,
size = log_q_per_ml),
color = my_cols[2],
shape = 21)) %>%
add(geom_point(data = pointsPat1,
aes(x = time, y = id),
color = my_cols[2],
size = 4)) %>%
add(scale_size_continuous(range = c(3, 12))) %>%
add(scale_x_continuous(limits = c(0, 30),
breaks = seq(0, 30, by = 5))) %>%
add(theme_bw()) %>%
add(theme(legend.position = "none")) %>%
add(labs(x = "", y = "ID"))
pointsPat2 <- primary_persist %>%
filter(id %in% pattern2) %>%
group_by(id) %>%
arrange(id, week) %>%
mutate(first = row_number() == 1,
last = row_number() == n(),
point = factor(ifelse(first, 'first',
ifelse(last, 'last', '')))) %>%
ungroup() %>%
filter(point != '') %>%
select(-week, -first, -last)
pat2plot <- persistent %>%
filter(id %in% pattern2) %>%
ggplot() %>%
add(geom_segment(aes(x = 1, xend = primary_dur, y = id, yend = id),
size = 3,
color = my_cols[5])) %>%
add(geom_point(data = pointsPat2,
aes(x = time, y = id,
size = log_q_per_ml),
color = my_cols[2],
shape = 21)) %>%
add(geom_point(data = pointsPat2,
aes(x = time, y = id),
color = my_cols[2],
size = 4)) %>%
add(scale_size_continuous(range = c(3, 12))) %>%
add(scale_x_continuous(limits = c(0, 30),
breaks = seq(0, 30, by = 5))) %>%
add(theme_bw()) %>%
add(theme(legend.position = c(0.85, 0.3))) %>%
add(labs(x = "", y = "",
size = (expression(Log[10] ~ HBoV-1/mL))))
plot3 <- ggarrange(pat1plot, pat2plot, ncol = 2, labels = c("B", "D"))
annotate_figure(plot3,
bottom = text_grob("Duration of Primary Infection, weeks"))
big_plot <- ggarrange(plot2, plot3, nrow = 2)
annotate_figure(big_plot,
bottom = textGrob("Duration of Primary Infection, Weeks"))
# library(Cairo)
# Cairo("S:/MartinEpi/Analysis/Bocavirus Persistence Modeling/plots and figures/primary_infections.png",
#       type = "png",
#       units = "in",
#       width = 12,
#       height = 13,
#       pointsize = 12,
#       dpi = 96)
# big_plot <- ggarrange(plot2, plot3, nrow = 2)
# annotate_figure(big_plot,
#                 bottom = textGrob("Duration of Primary Infection, Weeks"))
# dev.off()
pointsPat1$pattern <- "Pattern 1"
pointsPat2$pattern <- "Pattern 2"
viral_loads <- rbind(pointsPat1, pointsPat2)
primary_vloads <- viral_loads %>%
mutate(period = as.character(point),
period = factor(period,
levels = c("first","peak","last")),
pattern = factor(pattern)) %>%
select(-point, -time) %>%
ggplot(aes(x = period, y = log_q_per_ml)) %>%
add(geom_boxplot(outlier.shape = NA)) %>%
add(geom_jitter(aes(color = id),
alpha = 0.7,
size = 5,
width = 0.25)) %>%
add(facet_wrap(~pattern, scales = "free_x")) %>%
add(theme_bw()) %>%
add(theme(legend.position = "none")) %>%
add(labs(
x = "Primary Infection Period",
y = expression(Log[10] ~ HBoV-1/mL)
))
primary_vloads
library(msm)
installed.packages()
installed <- installed.packages()
dim(installed)
View(installed)
grep("msm", installed)
grep("msm", installed, value = TRUE)
grepl("msm", installed)
help("grep")
regexpr("msm", installed)
gregexpr("msm", installed)
test <- installed.packages()[1]
test
test <- installed.packages()[, 1]
head(test)
if (!require(msm)) install.packages("msm")
data(heart)
library(msm)
data(heart)
help(msm)
data(cav)
??msm
head(cav)
data_frame(cav)
tibble(cav)
tbl_df(cav)
View(episodes)
View(bov.pad)
head(bov.pad)
bov.pad %>%
arrange(id, week) %>%
group_by(id) %>%
mutate(first = as.numeric(row_number == 1)) %>%
View()
bov.pad %>%
arrange(id, week) %>%
group_by(id) %>%
mutate(first = as.numeric(row_number() == 1)) %>%
View()
head(bov.pad)
View(bov.pad)
bov.pad %>%
arrange(id, week) %>%
group_by(id) %>%
mutate(
first = as.numeric(row_number() == 1),
bov_infx = ifelse(!is.na(log_q_per_ml), 1, bov_infx),
state = ifelse(bov_infx == 1, 2, 1)
) %>% View()
bov.pad %>%
arrange(id, week) %>%
group_by(id) %>%
mutate(
first = as.numeric(row_number() == 1),
bov_infx = ifelse(!is.na(log_q_per_ml), 1, bov_infx),
state = ifelse(bov_infx == 1, 2, 1)
) %>% View()
bov.pad %>%
arrange(id, week) %>%
group_by(id) %>%
mutate(
first = as.numeric(row_number() == 1),
bov_infx = ifelse(!is.na(log_q_per_ml), 1, bov_infx),
state = ifelse(!is.na(bov_infx), 2, 1)
) %>% View()
states <- bov.pad %>%
arrange(id, week) %>%
group_by(id) %>%
mutate(
first = as.numeric(row_number() == 1),
bov_infx = ifelse(!is.na(log_q_per_ml), 1, bov_infx),
state = ifelse(!is.na(bov_infx), 2, 1)
)
rm(states)
bov.states <- bov.pad %>%
arrange(id, week) %>%
group_by(id) %>%
mutate(
first = as.numeric(row_number() == 1),
bov_infx = ifelse(!is.na(log_q_per_ml), 1, bov_infx),
state = ifelse(!is.na(bov_infx), 2, 1)
)
View(bov.states)
bov.states <- bov.pad %>%
arrange(id, week) %>%
group_by(id) %>%
mutate(
first = as.numeric(row_number() == 1),
bov_infx = ifelse(!is.na(log_q_per_ml), 1, bov_infx),
state = ifelse(!is.na(bov_infx), 2, 1)
) %>%
ungroup()
kable(head(bov.states))
head(bov.states)
blipRM <- bov.states %>%
mutate(state = ifelse(episode == 'blip', 1, state))
View(blipRM)
bov.states <- bov.pad %>%
arrange(id, week) %>%
group_by(id) %>%
mutate(
firstobs = as.numeric(row_number() == 1),
bov_infx = ifelse(!is.na(log_q_per_ml), 1, bov_infx),
state = ifelse(!is.na(bov_infx), 2, 1),
weeks = row_number()
) %>%
ungroup()
View(bov.states)
head(bov.states)
bov.states <- bov.pad %>%
arrange(id, week) %>%
group_by(id) %>%
mutate(
firstobs = as.numeric(row_number() == 1),
bov_infx = ifelse(!is.na(log_q_per_ml), 1, bov_infx),
state = ifelse(!is.na(bov_infx), 2, 1),
weeks = row_number(),
log_q_per_ml = ifelse(is.na(log_q_per_ml), 0, log_q_per_ml)
) %>%
ungroup() %>%
select(-primary_cnt)
head(bov.states)
bov.states <- bov.pad %>%
arrange(id, week) %>%
group_by(id) %>%
mutate(
firstobs = as.numeric(row_number() == 1),
bov_infx = ifelse(!is.na(log_q_per_ml), 1, bov_infx),
state = ifelse(!is.na(bov_infx), 2, 1),
weeks = row_number(),
log_q_per_ml = ifelse(is.na(log_q_per_ml), 0, log_q_per_ml)
) %>%
ungroup() %>%
select(-primary_cnt, -bov_infx)
blipRM <- bov.states %>%
mutate(state = ifelse(episode == 'blip', 1, state))
head(bov.states)
head(cav)
statetable.msm(state, PTNUM, data = cav)
head(bov.states)
statetable.msm(state, id, data = bov.states)
statetable.msm(state, id, data = bov.states) %>%
kable()
statetable.msm(state, id, data = bov.states) %>%
kable()
statetable.msm(state, id, data = bov.states) %>%
kable()
str(statetable.msm(state, id, data = bov.states))
attributes(statetable.msm(state, id, data = bov.states))
statetable.msm(state, id, data = bov.states) -> test
test
knitr::kable(test)
library(DiagrammeR)
library(DiagrammeR)
grViz("
diagraph boxes_and_circles {
node [shape = box]
A
B
}
")
grViz("
diagraph boxes_and_circles {
node [shape = box]
A
B
}
")
grViz("
diagraph boxes_and_circles {
node [shape = box]
A; B
A -> B; B->A
}
")
install.packages("DiagrammeR")
install.packages(c("commonmark", "DiagrammeR", "mgcv", "RcppArmadillo", "tidyr", "tidyselect"))
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
devtools::install_github("rich-iannone/DiagrammeR")
